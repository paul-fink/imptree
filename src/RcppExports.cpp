// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "imptree_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// treebuilder_cpp
Rcpp::XPtr<Iptree> treebuilder_cpp(const Rcpp::IntegerMatrix& data, const Rcpp::List& config);
RcppExport SEXP _imptree_treebuilder_cpp(SEXP dataSEXP, SEXP configSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type config(configSEXP);
    rcpp_result_gen = Rcpp::wrap(treebuilder_cpp(data, config));
    return rcpp_result_gen;
END_RCPP
}
// traindata_cpp
Rcpp::IntegerMatrix traindata_cpp(Rcpp::XPtr<Iptree> ptree);
RcppExport SEXP _imptree_traindata_cpp(SEXP ptreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<Iptree> >::type ptree(ptreeSEXP);
    rcpp_result_gen = Rcpp::wrap(traindata_cpp(ptree));
    return rcpp_result_gen;
END_RCPP
}
// hasRoot_cpp
bool hasRoot_cpp(Rcpp::XPtr<Iptree> ptree);
RcppExport SEXP _imptree_hasRoot_cpp(SEXP ptreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<Iptree> >::type ptree(ptreeSEXP);
    rcpp_result_gen = Rcpp::wrap(hasRoot_cpp(ptree));
    return rcpp_result_gen;
END_RCPP
}
// predict_cpp
Rcpp::List predict_cpp(Rcpp::XPtr<Iptree> ptree, const Rcpp::IntegerMatrix& newdata, const Rcpp::List& evalconfig);
RcppExport SEXP _imptree_predict_cpp(SEXP ptreeSEXP, SEXP newdataSEXP, SEXP evalconfigSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<Iptree> >::type ptree(ptreeSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerMatrix& >::type newdata(newdataSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List& >::type evalconfig(evalconfigSEXP);
    rcpp_result_gen = Rcpp::wrap(predict_cpp(ptree, newdata, evalconfig));
    return rcpp_result_gen;
END_RCPP
}
// treeInformation_cpp
Rcpp::IntegerMatrix treeInformation_cpp(Rcpp::XPtr<Iptree> ptree);
RcppExport SEXP _imptree_treeInformation_cpp(SEXP ptreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<Iptree> >::type ptree(ptreeSEXP);
    rcpp_result_gen = Rcpp::wrap(treeInformation_cpp(ptree));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_imptree_treebuilder_cpp", (DL_FUNC) &_imptree_treebuilder_cpp, 2},
    {"_imptree_traindata_cpp", (DL_FUNC) &_imptree_traindata_cpp, 1},
    {"_imptree_hasRoot_cpp", (DL_FUNC) &_imptree_hasRoot_cpp, 1},
    {"_imptree_predict_cpp", (DL_FUNC) &_imptree_predict_cpp, 3},
    {"_imptree_treeInformation_cpp", (DL_FUNC) &_imptree_treeInformation_cpp, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_imptree(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
